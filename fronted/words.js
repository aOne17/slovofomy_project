document.addEventListener("DOMContentLoaded", async () => {
    const wordsContainer = document.getElementById("word-list");
    const alphabetNav = document.getElementById("alphabet-nav");
    const searchInput = document.getElementById("searchInput");
    const addWordBtn = document.getElementById("addWordBtn");

    // –°–æ–∑–¥–∞—ë–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
    const alphabet = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù“¢–û”®–ü–†–°–¢–£“Æ–§–•–¶–ß–®–©–´–≠–Æ–Ø".split("");
    alphabetNav.innerHTML = alphabet
        .map(letter => `<span class="alphabet-letter" data-letter="${letter}">${letter}</span>`)
        .join(" ");

    let allWords = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    async function checkAdmin() {
        const token = localStorage.getItem("token");
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω:", token); // <-- –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    
        if (!token) {
            addWordBtn.style.display = "none";
            localStorage.removeItem("isAdmin");
            return;
        }
    
        try {
            const response = await fetch("http://localhost:5000/check-admin", {
                method: "GET",
                headers: { Authorization: `Bearer ${token}` },
            });
    
            console.log("–û—Ç–≤–µ—Ç check-admin:", response.status); // <-- –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    
            if (response.ok) {
    addWordBtn.style.display = "block";
    localStorage.setItem("isAdmin", "true"); // <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
} else {
    addWordBtn.style.display = "none";
    localStorage.removeItem("isAdmin"); // <-- —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
}

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞:", error);
            addWordBtn.style.display = "none";
        }
    }
    
    

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã
    async function loadWords() {
        try {
            const response = await fetch("http://localhost:5000/words", { cache: "no-store" }); 
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
            
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤");
    
            allWords = await response.json();
            console.log("–°–ª–æ–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:", allWords);
    
            allWords.sort((a, b) => a.tuvian.localeCompare(b.tuvian, "ru"));
            renderWords(allWords);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤:", error);
        }
    }
    
    

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    function renderWords(words) {
    wordsContainer.innerHTML = "";

    const isAdmin = localStorage.getItem("isAdmin") === "true"; // ‚úÖ –í—ã–Ω–µ—Å–ª–∏ –Ω–∞–≤–µ—Ä—Ö

    const groupedWords = {};
    words.forEach(word => {
        const firstLetter = word.tuvian[0].toUpperCase();
        if (!groupedWords[firstLetter]) {
            groupedWords[firstLetter] = [];
        }
        groupedWords[firstLetter].push(word);
    });

    alphabet.forEach(letter => {
        if (groupedWords[letter]) {
            const section = document.createElement("div");
            section.innerHTML = `<h2 id="${letter}">${letter}</h2>` +
                groupedWords[letter]
                    .map(word => `
                        <p>
                            <a href="#" class="word-link" data-id="${word.id}">${word.tuvian}</a>
                            ${isAdmin ? `
                                <button class="edit-btn" data-id="${word.id}">‚úé</button>
                                <button class="delete-btn" data-id="${word.id}">üóëÔ∏è</button>
                            ` : ""}
                        </p>
                    `).join("");
            wordsContainer.appendChild(section);
        }
    });
}

    

    // –§–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤
    function filterWords() {
        const searchValue = searchInput.value.toLowerCase();
        const filteredWords = allWords.filter(word =>
            word.tuvian.toLowerCase().includes(searchValue)
        );
        renderWords(filteredWords);
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    alphabetNav.addEventListener("click", (event) => {
        if (event.target.classList.contains("alphabet-letter")) {
            const letter = event.target.dataset.letter;
            const section = document.getElementById(letter);
            if (section) {
                section.scrollIntoView({ behavior: "smooth" });
            }
        }
    });

    searchInput.addEventListener("input", filterWords);

    await checkAdmin();
    await loadWords();
});
document.addEventListener("click", async (event) => {
    if (event.target.classList.contains("word-link")) {
        event.preventDefault();
        const wordId = event.target.getAttribute("data-id");
        await openWordModal(wordId);
    }
    if (event.target.classList.contains("delete-btn")) {
        const id = event.target.getAttribute("data-id");
        if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?")) {
            try {
                const token = localStorage.getItem("token");
                const response = await fetch(`http://localhost:5000/words/${id}`, {
                    method: "DELETE",
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    alert("–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ");
                    await loadWords(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                } else {
                    alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
            }
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã)
    if (event.target.classList.contains("edit-btn")) {
    const id = event.target.getAttribute("data-id");
    await openEditModal(id);
}

});




function closeWordModal() {
    document.getElementById("wordModal").style.display = "none";
}

async function openWordModal(wordId) {
    try {
        const response = await fetch(`http://localhost:5000/words/${wordId}/details`);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞");

        const data = await response.json();
        console.log("–î–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã:", data);

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—ã, –≥–ª–∞–≥–æ–ª—ã –∏ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
        const baseForms = Array.isArray(data.forms) ? data.forms : [];
        const verbs = Array.isArray(data.verbs) ? data.verbs : [];
        const adjectives = Array.isArray(data.adjectives) ? data.adjectives : [];
        const synonyms = Array.isArray(data.synonyms) ? data.synonyms : [];

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞
        const forms = [
            ...baseForms.map(f => ({ ...f, case_name: f.case_name })),
            ...verbs.map(v => ({ ...v, case_name: "–≥–ª–∞–≥–æ–ª" })),
            ...adjectives.map(a => ({ ...a, case_name: "–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ" }))
        ];

        // üîç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ—Ä–º—ã
        function detectType(form) {
            const name = (form.case_name || '').toLowerCase();
            if (name.includes('–≥–ª–∞–≥–æ–ª')) return 'verb';
            if (name.includes('–ø—Ä–∏–ª–∞–≥')) return 'adj';
            if (name.includes('–¥—Ä—É–≥–æ–µ') || name.includes('—Ñ–æ—Ä–º–∞')) return 'other';
            return 'case';
        }

        const caseOrder = [
            "–ê–¥–∞–∞—Ä—ã–Ω—ã“£",
            "–•–∞–º–∞–∞—Ä—ã—à—Ç—ã—Ä–∞—Ä—ã–Ω—ã“£",
            "–ë—ç—ç—Ä–∏–Ω–∏“£",
            "–û–Ω–∞–∞—Ä—ã–Ω—ã“£",
            "–¢—É—Ä–∞—Ä—ã–Ω—ã“£",
            "“Æ–Ω–µ—Ä–∏–Ω–∏“£",
            "–£–≥–ª–∞–∞—Ä—ã–Ω—ã“£"
        ];

        const casesSingular = forms
            .filter(f => detectType(f) === 'case' && !f.plural)
            .sort((a, b) => caseOrder.indexOf(a.case_name) - caseOrder.indexOf(b.case_name));

        const casesPlural = forms
            .filter(f => detectType(f) === 'case' && f.plural)
            .sort((a, b) => caseOrder.indexOf(a.case_name) - caseOrder.indexOf(b.case_name));

        const verbsFromForms = forms.filter(f => detectType(f) === 'verb');
        const adjectivesFromForms = forms.filter(f => detectType(f) === 'adj');

        // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ HTML
        let modalContent = `
        <button class="close-button" onclick="closeWordModal()">√ó</button>
        <h2>–§–æ—Ä–º—ã —Å–ª–æ–≤–∞</h2>

        <div>
            <h3>–ü–∞–¥–µ–∂–∏</h3>
            <div style="display: flex; gap: 40px;">
                <div>
                    <h4>–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${casesSingular.map(f => `<p>${f.case_name}: ${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
                <div>
                    <h4>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${casesPlural.map(f => `<p>${f.case_name}: ${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
            </div>
        </div>

        <div style="margin-top: 20px;">
            <h3>–ì–ª–∞–≥–æ–ª—ã</h3>
            <div style="display: flex; gap: 40px;">
                <div>
                    <h4>–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${verbsFromForms.filter(f => !f.plural).map(f => `<p>${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
                <div>
                    <h4>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${verbsFromForms.filter(f => f.plural).map(f => `<p>${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
            </div>
        </div>

        <div style="margin-top: 20px;">
            <h3>–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ</h3>
            <div style="display: flex; gap: 40px;">
                <div>
                    <h4>–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${adjectivesFromForms.filter(f => !f.plural).map(f => `<p>${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
                <div>
                    <h4>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ</h4>
                    ${adjectivesFromForms.filter(f => f.plural).map(f => `<p>${f.form}</p>`).join('') || '<p>‚Äî</p>'}
                </div>
            </div>
        </div>

        ${synonyms.length > 0 ? `
            <div style="margin-top: 20px;">
                <h3>–û—Å—Ç–∞–ª—å–Ω–æ–µ (—Å–∏–Ω–æ–Ω–∏–º—ã)</h3>
                <ul>${synonyms.map(s => `<li>${s}</li>`).join('')}</ul>
            </div>` : ''}
        `;

        document.getElementById("modal-content").innerHTML = modalContent;
        document.getElementById("wordModal").style.display = "block";
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º —Å–ª–æ–≤–∞:", error);
    }
}

async function openEditModal(wordId) {
    try {
        const response = await fetch(`http://localhost:5000/words/${wordId}/details`);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞");

        const data = await response.json();
        const word = data.word || {};
        const baseForms = Array.isArray(data.forms) ? data.forms : [];
        const verbs = Array.isArray(data.verbs) ? data.verbs : [];
        const adjectives = Array.isArray(data.adjectives) ? data.adjectives : [];
        const synonyms = Array.isArray(data.synonyms) ? data.synonyms : [];

const forms = [
    ...baseForms.map(f => ({ ...f, case_name: f.case_name })),
    ...verbs.map(v => ({ ...v, case_name: '–≥–ª–∞–≥–æ–ª' })),
    ...adjectives.map(a => ({ ...a, case_name: '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ' }))
];


        let modalContent = `
    <button class="close-button" onclick="closeWordModal()">√ó</button>
    <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ</h2>
    <input type="hidden" id="edit-word-id" value="${wordId}" />
    <label>–ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞:</label>
    <input type="text" id="editBaseForm" value="${word.tuvian || ''}" />
    
    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
    <input type="text" id="editComment" value="${word.comment || ''}" />
    
    <label>–°–∏–Ω–æ–Ω–∏–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
    <input type="text" id="editSynonyms" value="${synonyms.join(', ')}" />

    <h3>–§–æ—Ä–º—ã —Å–ª–æ–≤–∞</h3>
    <div id="edit-forms-container">
        ${forms.map(f => `
            <div class="form-group">
                <input type="text" class="case-name" value="${f.case_name || ''}" placeholder="–ü–∞–¥–µ–∂ / –¢–∏–ø" />
                <input type="text" class="case-form" value="${f.form || ''}" placeholder="–§–æ—Ä–º–∞ —Å–ª–æ–≤–∞" />
                <label>
                    <input type="checkbox" class="case-plural" ${f.plural ? "checked" : ""} /> –ú–Ω. —á–∏—Å–ª–æ
                </label>
            </div>
        `).join("")}
    </div>
    <button onclick="saveWordChanges()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
`;


        document.getElementById("modal-content").innerHTML = modalContent;
        document.getElementById("wordModal").style.display = "block";
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", err);
    }
}
async function saveWordChanges() {
    const wordId = document.getElementById("edit-word-id").value;
    const tuvian = document.getElementById("editBaseForm").value.trim(); // ‚Üê —ç—Ç–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const comment = document.getElementById("editComment").value.trim();
    const synonyms = document.getElementById("editSynonyms").value
        .split(",")
        .map(s => s.trim())
        .filter(s => s);

    const forms = [];
const adjectives = [];
const verbs = [];

document.querySelectorAll("#edit-forms-container .form-group").forEach(row => {
    const caseValue = row.querySelector(".case-name").value.trim();
    const formValue = row.querySelector(".case-form").value.trim();
    const plural = row.querySelector(".case-plural").checked;

    if (caseValue && formValue) {
        const lower = caseValue.toLowerCase();
        if (lower.includes("–ø—Ä–∏–ª–∞–≥")) {
            adjectives.push({ form: formValue, plural });
        } else if (lower.includes("–≥–ª–∞–≥–æ–ª")) {
            verbs.push({ form: formValue, plural });
        } else {
            forms.push({ case_name: caseValue, form: formValue, plural });
        }
    }
});


    const data = { tuvian, comment, synonyms, forms, adjectives, verbs };


    try {
        const token = localStorage.getItem("token");
        const response = await fetch(`http://localhost:5000/words/${wordId}`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            alert("–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
            closeWordModal();
            await loadWords();
        } else {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞");
    }
}








    

